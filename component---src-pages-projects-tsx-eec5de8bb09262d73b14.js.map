{"version":3,"file":"component---src-pages-projects-tsx-eec5de8bb09262d73b14.js","mappings":"mQAiCA,MAAMA,EAAU,CAAC,QAAS,MAAO,QAAS,QAAS,KAAM,MAE1C,SAASC,EAAQC,GAAoC,IAAnC,KAAEC,EAAI,SAAEC,GAAyBF,EAChE,MAAMG,GAASC,EAAAA,EAAAA,UAAuB,KACpC,MAAMC,EAAY,IAAIC,gBAAgBJ,aAAQ,EAARA,EAAUK,QAChD,OAAOF,EAAUG,IAAI,UAAYH,EAAUI,IAAI,UAAY,IAAI,GAC9D,CAACP,IAEEQ,GAAqBN,EAAAA,EAAAA,UAA4B,IAChDD,EACEF,EAAKU,KAAKC,WAAWC,KAAIC,IAC9B,MAAMC,EAAWD,EAASC,SAASF,KAAIG,IAAW,IAC7CA,EACHC,QAASD,EAAQE,KAAKC,SAAShB,OAEjC,MAAO,CACLiB,MAAON,EAASM,MAChBL,WACAM,MAAON,EAASO,OAAMN,GAAWA,EAAQC,SAC1C,IAViBhB,EAAKU,KAAKC,YAY7B,CAACX,EAAME,IAEV,OACEoB,EAAAA,EAAAA,KAACC,EAAAA,GAAI,CACHC,GAAG,WACHvB,SAAUA,EACVwB,SAAU,CACRC,IAAKC,EAAAA,GACLR,MAAO,0BACPS,UAEFC,EAAAA,EAAAA,MAAA,WAASC,UAAU,6BAA4BF,SAAA,EAC7CC,EAAAA,EAAAA,MAAA,WAASC,UAAU,wBAAuBF,SAAA,EACxCN,EAAAA,EAAAA,KAAA,MAAIQ,UAAU,YAAWF,SAAC,cAC1BN,EAAAA,EAAAA,KAAA,OAAKQ,UAAU,yBAAwBF,SACpC/B,EAAQe,KAAImB,IACXT,EAAAA,EAAAA,KAAA,UACEU,QAASA,KACH9B,IAAW6B,GACbE,EAAAA,EAAAA,UAAS,GAAGhC,EAASiC,WAAWjC,EAASkC,OAAQ,CAC/CC,SAAS,KAGXH,EAAAA,EAAAA,UACE,GAAGhC,EAASiC,WAAWjC,EAASkC,eAAeJ,IAC/C,CAAEK,SAAS,GAEf,EACAR,UAGFN,EAAAA,EAAAA,KAACe,EAAAA,GAAK,CACJP,UAAWQ,IAAW,CAAE,kBAAmBpC,IAAW6B,IACtDQ,MAAI,EAAAX,SAEHG,KANEA,UAYZtB,EAAmBG,KAAIC,IACtBgB,EAAAA,EAAAA,MAAA,WACEC,UAAWQ,IAAW,0BAA2B,CAC/C,iCAAkCzB,EAASO,QAC1CQ,SAAA,EAGHN,EAAAA,EAAAA,KAAA,MAAIQ,UAAU,KAAIF,SAAEf,EAASM,SAC7BG,EAAAA,EAAAA,KAAA,MAAAM,SACGf,EAASC,SAASF,KAAIG,IACrBO,EAAAA,EAAAA,KAAA,MACEQ,UAAWQ,IAAW,sBAAuB,CAC3C,8BAA+BvB,EAAQC,SACtCY,UAGHC,EAAAA,EAAAA,MAACW,EAAAA,GAAI,CACHC,GAAI1B,EAAQ2B,KAAOC,EAAAA,KAAa,IAChCC,SAAUC,QAAQ9B,EAAQ+B,eAAiB/B,EAAQ2B,MAEnDK,OAAO,SACPC,GAAIjC,EAAQ2B,MAAQ3B,EAAQ+B,aAC5BG,UAAQ,EAAArB,SAAA,EAERC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,sBAAqBF,SAAA,EAClCN,EAAAA,EAAAA,KAAA,QAAMQ,UAAU,uBAAsBF,SACnCb,EAAQI,SAEXG,EAAAA,EAAAA,KAAA,QAAMQ,UAAU,6BAA4BF,SACzCb,EAAQmC,kBAGb5B,EAAAA,EAAAA,KAAA,MAAIQ,UAAU,yBACdR,EAAAA,EAAAA,KAAA,OAAKQ,UAAU,sBAAqBF,SAAEb,EAAQoC,SAdzCpC,EAAQI,QALVJ,EAAQI,aATdN,EAASM,aAsC1B,C","sources":["webpack://@adamgraham/portfolio/./src/pages/projects.tsx"],"sourcesContent":["import { Badge, Link } from '@zigurous/react-components';\nimport classNames from 'classnames';\nimport { graphql, Link as GatsbyLink, navigate } from 'gatsby';\nimport React, { useMemo } from 'react';\nimport { Page } from '../components';\nimport { baseUri } from '../links';\nimport '../styles/projects-list.css';\n\ninterface ProjectsCategory {\n  title: string;\n  projects: ProjectsProject[];\n  empty?: boolean;\n}\n\ninterface ProjectsProject {\n  title: string;\n  description: string;\n  date: string;\n  link: string;\n  externalLink: string;\n  tags: string[];\n  hidden?: boolean;\n}\n\ninterface ProjectsProps {\n  data: {\n    json: {\n      categories: ProjectsCategory[];\n    };\n  };\n  location: Location;\n}\n\nconst filters = ['React', 'iOS', 'Unity', 'VR/AR', '3D', '2D'];\n\nexport default function Projects({ data, location }: ProjectsProps) {\n  const filter = useMemo<string | null>(() => {\n    const urlParams = new URLSearchParams(location?.search);\n    return urlParams.has('filter') ? urlParams.get('filter') : null;\n  }, [location]);\n\n  const filteredCategories = useMemo<ProjectsCategory[]>(() => {\n    if (!filter) return data.json.categories;\n    return data.json.categories.map(category => {\n      const projects = category.projects.map(project => ({\n        ...project,\n        hidden: !project.tags.includes(filter),\n      }));\n      return {\n        title: category.title,\n        projects,\n        empty: projects.every(project => project.hidden),\n      };\n    });\n  }, [data, filter]);\n\n  return (\n    <Page\n      id=\"projects\"\n      location={location}\n      metadata={{\n        url: baseUri,\n        title: 'Adam Graham â€¢ Projects',\n      }}\n    >\n      <article className=\"projects-list container-lg\">\n        <section className=\"projects-list__header\">\n          <h1 className=\"display-4\">Projects</h1>\n          <div className=\"projects-list__filters\">\n            {filters.map(tag => (\n              <button\n                onClick={() => {\n                  if (filter === tag) {\n                    navigate(`${location.pathname}${location.hash}`, {\n                      replace: true,\n                    });\n                  } else {\n                    navigate(\n                      `${location.pathname}${location.hash}?filter=${tag}`,\n                      { replace: true },\n                    );\n                  }\n                }}\n                key={tag}\n              >\n                <Badge\n                  className={classNames({ 'badge--selected': filter === tag })}\n                  pill\n                >\n                  {tag}\n                </Badge>\n              </button>\n            ))}\n          </div>\n        </section>\n        {filteredCategories.map(category => (\n          <section\n            className={classNames('projects-list__category', {\n              'projects-list__category--empty': category.empty,\n            })}\n            key={category.title}\n          >\n            <h2 className=\"h6\">{category.title}</h2>\n            <ul>\n              {category.projects.map(project => (\n                <li\n                  className={classNames('projects-list__item', {\n                    'projects-list__item--hidden': project.hidden,\n                  })}\n                  key={project.title}\n                >\n                  <Link\n                    as={project.link ? GatsbyLink : 'a'}\n                    external={Boolean(project.externalLink && !project.link)}\n                    key={project.title}\n                    target=\"_blank\"\n                    to={project.link || project.externalLink}\n                    unstyled\n                  >\n                    <div className=\"projects-list__text\">\n                      <span className=\"projects-list__title\">\n                        {project.title}\n                      </span>\n                      <span className=\"projects-list__description\">\n                        {project.description}\n                      </span>\n                    </div>\n                    <hr className=\"projects-list__line\" />\n                    <div className=\"projects-list__date\">{project.date}</div>\n                  </Link>\n                </li>\n              ))}\n            </ul>\n          </section>\n        ))}\n      </article>\n    </Page>\n  );\n}\n\nexport const query = graphql`\n  query Projects {\n    json: allProjectsJson {\n      categories: nodes {\n        title\n        projects {\n          title\n          description\n          date\n          link\n          externalLink\n          tags\n        }\n      }\n    }\n  }\n`;\n"],"names":["filters","Projects","_ref","data","location","filter","useMemo","urlParams","URLSearchParams","search","has","get","filteredCategories","json","categories","map","category","projects","project","hidden","tags","includes","title","empty","every","_jsx","Page","id","metadata","url","baseUri","children","_jsxs","className","tag","onClick","navigate","pathname","hash","replace","Badge","classNames","pill","Link","as","link","GatsbyLink","external","Boolean","externalLink","target","to","unstyled","description","date"],"sourceRoot":""}