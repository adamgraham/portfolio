{"version":3,"file":"component---src-pages-projects-js-a15f4187e03e2bc882ac.js","mappings":"mNASO,MAkBDA,EAAU,CAAC,QAAS,MAAO,QAAS,QAAS,KAAM,MA8HzD,UA5HiBC,IAAyB,IAAxB,KAAEC,EAAI,SAAEC,GAAUF,EAClC,MAAMG,GAASC,EAAAA,EAAAA,UAAQ,KACrB,MAAMC,EAAY,IAAIC,gBAAgBJ,aAAQ,EAARA,EAAUK,QAChD,OAAOF,EAAUG,IAAI,UAAYH,EAAUI,IAAI,UAAY,IAAI,GAC9D,CAACP,IAEEQ,GAAqBN,EAAAA,EAAAA,UAAQ,IAC5BD,EACEF,EAAKU,KAAKC,WAAWC,KAAKC,IAC/B,MAAMC,EAAWD,EAASC,SAASF,KAAKG,IAAO,IAC1CA,EACHC,QAASD,EAAQE,KAAKC,SAAShB,OAEjC,MAAO,CACLiB,MAAON,EAASM,MAChBL,WACAM,MAAON,EAASO,OAAON,GAAYA,EAAQC,SAC5C,IAViBhB,EAAKU,KAAKC,YAY7B,CAACX,EAAME,IAEV,OACEoB,EAAAA,cAACC,EAAAA,GAAI,CACHC,GAAG,WACHvB,SAAUA,EACVwB,SAAU,CACRC,IAAKC,EAAAA,GACLR,MAAO,2BAGTG,EAAAA,cAAA,WAASM,UAAU,8BACjBN,EAAAA,cAAA,WAASM,UAAU,yBACjBN,EAAAA,cAAA,MAAIM,UAAU,aAAY,YAC1BN,EAAAA,cAAA,OAAKM,UAAU,0BACZ9B,EAAQc,KAAKiB,GACZP,EAAAA,cAAA,UACEQ,QAASA,KACH5B,IAAW2B,GACbE,EAAAA,EAAAA,UAAS,GAAG9B,EAAS+B,WAAW/B,EAASgC,OAAQ,CAC/CC,SAAS,KAGXH,EAAAA,EAAAA,UACE,GAAG9B,EAAS+B,WAAW/B,EAASgC,eAAeJ,IAC/C,CAAEK,SAAS,GAEf,EAEFC,IAAKN,GAELP,EAAAA,cAACc,EAAAA,GAAK,CACJR,UAAWS,IAAW,CAAE,kBAAmBnC,IAAW2B,IACtDS,MAAI,GAEHT,QAMVpB,EAAmBG,KAAKC,GACvBS,EAAAA,cAAA,WACEM,UAAWS,IAAW,0BAA2B,CAC/C,iCAAkCxB,EAASO,QAE7Ce,IAAKtB,EAASM,OAEdG,EAAAA,cAAA,MAAIM,UAAU,MAAMf,EAASM,OAC7BG,EAAAA,cAAA,UACGT,EAASC,SAASF,KAAKG,GACtBO,EAAAA,cAAA,MACEM,UAAWS,IAAW,sBAAuB,CAC3C,8BAA+BtB,EAAQC,SAEzCmB,IAAKpB,EAAQI,OAEbG,EAAAA,cAACiB,EAAAA,GAAI,CACHC,YAAazB,EAAQ0B,KAAOC,EAAAA,KAAa,IACzCC,SAAUC,QAAQ7B,EAAQ8B,eAAiB9B,EAAQ0B,MACnDN,IAAKpB,EAAQI,MACb2B,OAAO,SACPC,GAAIhC,EAAQ0B,MAAQ1B,EAAQ8B,aAC5BG,UAAQ,GAER1B,EAAAA,cAAA,OAAKM,UAAU,uBACbN,EAAAA,cAAA,QAAMM,UAAU,wBACbb,EAAQI,OAEXG,EAAAA,cAAA,QAAMM,UAAU,8BACbb,EAAQkC,cAGb3B,EAAAA,cAAA,MAAIM,UAAU,wBACdN,EAAAA,cAAA,OAAKM,UAAU,uBAAuBb,EAAQmC,eAQvD,C","sources":["webpack://@adamgraham/portfolio/./src/pages/projects.js"],"sourcesContent":["import { Badge, Link } from '@zigurous/react-components';\nimport classNames from 'classnames';\nimport { graphql, Link as GatsbyLink, navigate } from 'gatsby';\nimport PropTypes from 'prop-types';\nimport React, { useMemo } from 'react';\nimport { Page } from '../components';\nimport { baseUri } from '../links';\nimport '../styles/projects-list.css';\n\nexport const query = graphql`\n  query Projects {\n    json: allProjectsJson {\n      categories: nodes {\n        title\n        projects {\n          title\n          description\n          date\n          link\n          externalLink\n          tags\n        }\n      }\n    }\n  }\n`;\n\nconst filters = ['React', 'iOS', 'Unity', 'VR/AR', '3D', '2D'];\n\nconst Projects = ({ data, location }) => {\n  const filter = useMemo(() => {\n    const urlParams = new URLSearchParams(location?.search);\n    return urlParams.has('filter') ? urlParams.get('filter') : null;\n  }, [location]);\n\n  const filteredCategories = useMemo(() => {\n    if (!filter) return data.json.categories;\n    return data.json.categories.map((category) => {\n      const projects = category.projects.map((project) => ({\n        ...project,\n        hidden: !project.tags.includes(filter),\n      }));\n      return {\n        title: category.title,\n        projects,\n        empty: projects.every((project) => project.hidden),\n      };\n    });\n  }, [data, filter]);\n\n  return (\n    <Page\n      id=\"projects\"\n      location={location}\n      metadata={{\n        url: baseUri,\n        title: 'Adam Graham â€¢ Projects',\n      }}\n    >\n      <article className=\"projects-list container-lg\">\n        <section className=\"projects-list__header\">\n          <h1 className=\"display-4\">Projects</h1>\n          <div className=\"projects-list__filters\">\n            {filters.map((tag) => (\n              <button\n                onClick={() => {\n                  if (filter === tag) {\n                    navigate(`${location.pathname}${location.hash}`, {\n                      replace: true,\n                    });\n                  } else {\n                    navigate(\n                      `${location.pathname}${location.hash}?filter=${tag}`,\n                      { replace: true }\n                    );\n                  }\n                }}\n                key={tag}\n              >\n                <Badge\n                  className={classNames({ 'badge--selected': filter === tag })}\n                  pill\n                >\n                  {tag}\n                </Badge>\n              </button>\n            ))}\n          </div>\n        </section>\n        {filteredCategories.map((category) => (\n          <section\n            className={classNames('projects-list__category', {\n              'projects-list__category--empty': category.empty,\n            })}\n            key={category.title}\n          >\n            <h2 className=\"h6\">{category.title}</h2>\n            <ul>\n              {category.projects.map((project) => (\n                <li\n                  className={classNames('projects-list__item', {\n                    'projects-list__item--hidden': project.hidden,\n                  })}\n                  key={project.title}\n                >\n                  <Link\n                    ElementType={project.link ? GatsbyLink : 'a'}\n                    external={Boolean(project.externalLink && !project.link)}\n                    key={project.title}\n                    target=\"_blank\"\n                    to={project.link || project.externalLink}\n                    unstyled\n                  >\n                    <div className=\"projects-list__text\">\n                      <span className=\"projects-list__title\">\n                        {project.title}\n                      </span>\n                      <span className=\"projects-list__description\">\n                        {project.description}\n                      </span>\n                    </div>\n                    <hr className=\"projects-list__line\" />\n                    <div className=\"projects-list__date\">{project.date}</div>\n                  </Link>\n                </li>\n              ))}\n            </ul>\n          </section>\n        ))}\n      </article>\n    </Page>\n  );\n};\n\nProjects.propTypes = {\n  data: PropTypes.shape({\n    json: PropTypes.shape({\n      title: PropTypes.string,\n      Projects: PropTypes.arrayOf(\n        PropTypes.shape({\n          title: PropTypes.string,\n          description: PropTypes.string,\n          date: PropTypes.string,\n          link: PropTypes.string,\n          externalLink: PropTypes.string,\n          tags: PropTypes.arrayOf(PropTypes.string),\n        })\n      ),\n    }),\n  }),\n  location: PropTypes.object,\n};\n\nexport default Projects;\n"],"names":["filters","_ref","data","location","filter","useMemo","urlParams","URLSearchParams","search","has","get","filteredCategories","json","categories","map","category","projects","project","hidden","tags","includes","title","empty","every","React","Page","id","metadata","url","baseUri","className","tag","onClick","navigate","pathname","hash","replace","key","Badge","classNames","pill","Link","ElementType","link","GatsbyLink","external","Boolean","externalLink","target","to","unstyled","description","date"],"sourceRoot":""}