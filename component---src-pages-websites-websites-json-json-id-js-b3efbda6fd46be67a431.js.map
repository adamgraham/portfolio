{"version":3,"file":"component---src-pages-websites-websites-json-json-id-js-b3efbda6fd46be67a431.js","mappings":"kKAyGA,UAvBgBA,IAAyB,IAAxB,KAAEC,EAAI,SAAEC,GAAUF,EACjC,MAAM,QAAEG,GAAYF,GACd,QAAEG,GAAYH,EAAKI,KACzB,OACEC,EAAAA,cAACC,EAAAA,GAAW,CACVC,SAAUL,EAAQK,SAClBJ,QAASA,EACTF,SAAUA,EACVC,QAASA,GACT,C","sources":["webpack://@adamgraham/portfolio/./src/pages/websites/{WebsitesJson.jsonId}.js"],"sourcesContent":["import { graphql } from 'gatsby';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { ProjectPage, ProjectProps, SlideProps } from '../../components';\n\nexport const query = graphql`\n  query ($id: String!) {\n    project: websitesJson(id: { eq: $id }) {\n      id: jsonId\n      category\n      title\n      date\n      description\n      description_short\n      description_long\n      image {\n        sharp: childImageSharp {\n          original {\n            src\n            width\n            height\n          }\n        }\n      }\n      details {\n        key\n        value\n      }\n      buttons {\n        name\n        link\n        icon\n      }\n      sections {\n        title\n        link\n        mainImage {\n          sharp: childImageSharp {\n            original {\n              src\n              width\n              height\n            }\n          }\n        }\n        mainVideo\n        paragraphs\n        gallery {\n          sharp: childImageSharp {\n            original {\n              src\n              width\n              height\n            }\n          }\n        }\n        videos\n      }\n    }\n    json: allWebsitesJson {\n      gallery: nodes {\n        id\n        category\n        title\n        description\n        description_short\n        image {\n          sharp: childImageSharp {\n            original {\n              src\n              width\n              height\n            }\n          }\n        }\n        imageAltText\n        imageBorder\n      }\n    }\n  }\n`;\n\nconst Website = ({ data, location }) => {\n  const { project } = data;\n  const { gallery } = data.json;\n  return (\n    <ProjectPage\n      category={project.category}\n      gallery={gallery}\n      location={location}\n      project={project}\n    />\n  );\n};\n\nWebsite.propTypes = {\n  data: PropTypes.shape({\n    project: ProjectProps,\n    json: PropTypes.shape({\n      gallery: PropTypes.arrayOf(SlideProps),\n    }),\n  }),\n  location: PropTypes.object,\n};\n\nexport default Website;\n"],"names":["_ref","data","location","project","gallery","json","React","ProjectPage","category"],"sourceRoot":""}